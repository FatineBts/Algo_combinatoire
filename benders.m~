function x,y,z=Benders(X0,fobjyz,A,b,Aeq,beq,YZ0,P,N,D)

X = X0; 
A_z = []; 
b_z = []; 
YZ = YZ0; 

%on résout à l'aide de patternsearch 
%on pose un x aléatoire et on cherche un bon y et z puis on cherche un bon
%x pour ce couple (y,z) = principe de l'algorithme de Smith 
%L'algorithme de Smith cherche pour toutes les topologies possibles donc
%pas polynomial. On ajoute la coupe pour s'arrêter à un moment afin que ce
%soit polynomial. 

%Topologie : on a les points terminaux imposés et le point de Steiner et on
%effectue des liens = comment on distribue les arrêtes. On considère qu'on
%peut faire bouger les points de Steiner de manière à changer la distance
%entre les points terminaux et les points de Steiner.

%initialisation
k = 1; 
LB = -inf; 
UB = +inf; 
K = []; 

%Sous-problème : on cherche x 
fobjX=@(X)objectiveyz(YZ,X,P,N,D);

x = patternsearch(fobjX,X,[],[]); 

%On met à jour UB
UB = min(UB,fobjX(x)); 
A_z = [A_z; -1]; 
b_z = [b_z; -fobjX(x)]; 

%Sous-problème : on cherche z
fobjZ=@(Z) Z; 
Z = intlinprog(fobjZ,A_z,b_z); 



end 